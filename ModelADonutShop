In class, we learned how to model an entity in JavaScript using a constructor function, properties, methods, and object instantiation. Now, it's your turn to write a program that models the following problem domain.

Before writing a single line of code, create a new project directory called donut_shop and initialize a new git repository there. Then, create and checkout a branch called model. Use this branch to commit all of your changes.

Problem domain:

Top Pot Donuts, with franchises all over town, needs your help calculating the number of donuts each location must prepare every day. The number of donuts to prepare depends on the hours of operation—7:00 AM to 6:00 PM—and a few factors unique to each location:

The minimum number of customers per hour.
The maximum number of customers per hour.
The average number of donuts purchased per customer.

They want you to write a program that simulates donut demand.

To do this you will first create a model of a donut shop, with the following components:

1) A constructor function with properties to represent the location-specific attributes found here https://docs.google.com/spreadsheets/d/1JxWujsnj2uBpd5UaNkUY6DZFKIh0MBo0nuK9OY9txfg/edit#gid=0.

2) Add a method or methods to the constructor which do the following:
    Generate a random number of customers. (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random)
    Calculate simulated amounts of donuts purchased for each hour using average donuts purchased and number of customers generated; then storing the results.
    Calculating the sum of these hourly totals and storing the results.

3) Instantiate new objects to represent each of the five locations.
    Verify the correctness of your model's properties and methods by regularly logging to the console.

Once your model can simulate the number of donuts sales at each location, incorporate the following components into your program.

4) Add an HTML table with a tr and th tags to represent the data the table will contain.(See page 132 in the HTML & CSS book)

5) Add a method to your constructor for rendering a new row into the table containing the data from its corresponding object.

6) Use the method to update the page's DOM with your model's hourly and daily totals.

Here's a brief example of how your table should look.
Location        7:00 AM8:00 AM	9:00 AM	10:00 AM	...	6:00 PM	Total
Downtown	    41	    53	    78	    63		        13	    935
Capitol Hill	25	    31	    44	    53		        4	    557
...

Once the data in the page's table cells are being generated from your model:
7) spruce up the page a bit with a title, some headers, and a paragraph description.

8) Add a README.md describing this project. and call it a day.

9) Save your work on GitHub:
    Create an empty repository on GitHub also called donut_shop.
    Add an origin remote to your local repository that points to your new GitHub repository.
    Push your local master branch to the origin's master branch on GitHub.
    Push your local model branch to the origin's model branch on GitHub.
    On GitHub, create a Pull Request from the model branch to the master branch.
    Review and accept that Pull Request.
    Pull down the origin's master branch to your local master branch.

Submit your work:

1) Submit a link to your Pull Request to this Canvas assignment.
2) Add a comment to your Canvas submission with answers to the following questions.
    How long did this assignment take you?
    What observations or questions do you have about what you've learned?