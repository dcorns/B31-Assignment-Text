In class, we introduced the Canvas API and the Chart.js APIs. This week, it's your turn to apply these APIs to a program that models the following problem domain.

This is a pair-programming exercise today. You will be creating the initial site together, alternating driver and navigator roles on each part of the process to keep things fresh. At the end of the day, each of you should have your own repo with the same code. This may seem a bit complicated at first but if you follow the instructions carefully, you should not have any problems.

1) Have the first driver create a new project directory called vote_tracker and initialize a new git repository there.
2) Create and checkout a branch called canvas (Use this branch to commit all of your changes).

Problem domain:
CutestKittenPageant.com has hired you to create an app so visitors can vote on who they think is the cutest kitten ever. The following is a list of requirements they've given you.

3) When the app loads, randomly select two kitten photos from this album (http://imgur.com/a/DDoWy) (download these photos, and put them in your project directory).
4) Ask the visitor to cast their vote by clicking on the photo of the cutest kitten.
5) Switch Roles
After voting,
Highlight the winning kitten photo.
Chart the relative popularity of the two photos.
Increase the total votes for the winning photo by one.
Encourage the visitor to vote for two new randomly selected kitten photos.
We'd like you to be in charge of the look-and-feel of the app too. All we ask is that you do the following.
Choose a custom web font (Links to an external site.).
Choose a custom color palette (Links to an external site.).
And create a responsive layout using semantic HTML.
After further analysis, you realize that you'll need the following domain models.

A set of Photo objects to manage all the attributes and behaviors around kitten photos.
A single Tracker object to manage all the attributes and behaviors around a visitor's voting experience.
As far as charting the relative popularity of the two kitten photos, start with the Chart.js API (Links to an external site.). If you finish early, see what it takes to replace the Chart API with direct calls to the Canvas API. You don't have to use the Canvas the API in the end, but try it out for yourself.

TIP: First build the HTML structure, then add the CSS style, and then add the JavaScript behavior. Don't forget to add a README.md describing your approach to this app.

Submit your work:

Push your local master branch to the origin's master branch on GitHub.
Push your local canvas branch to the origin's canvas branch on GitHub.
On GitHub, create a Pull Request from the canvas branch to the master branch.
Review and accept that Pull Request.
Submit the link to your Pull Request to this Canvas assignment.
Pull down the origin's master branch to your local master branch.
Add a comment to your Canvas submission with answers to the following questions.
How long did this assignment take you?
What observations or questions do you have about what you've learned?